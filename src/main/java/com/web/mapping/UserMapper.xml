<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!--namespace用于与DAO层的接口类进行绑定,这样我们无需实现DAO层的接口类,其接口类就能够自动的找到相关的SQL语句进行绑定实现-->


<mapper namespace="com.web.dao.UserMapper">
	<resultMap id="BaseResultMap" type="com.web.model.User">
		<id column="ID" property="id" jdbcType="VARCHAR" />
		<result column="NAME" property="name" jdbcType="VARCHAR" />
		<result column="PASSWORD" property="password" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="Base_Column_List">
		ID, NAME, PASSWORD
	</sql>
	
	<!-- 验证登陆 -->
	<!--select表示查询,它的id名称必须与DAO层接口的方法名相同,否则无法绑定-->
	<select id="login" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from user_Info
		where NAME = #{name} and PASSWORD = #{password} 
	</select>

	<!-- 根据ID查询数据 -->
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from user_Info
		where ID = #{id,jdbcType=VARCHAR}
	</select>
	
	<!-- 根据姓名查询数据 -->
	<select id="selectByName" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from user_Info
		where NAME = #{name,jdbcType=VARCHAR}
	</select>
	
	<!-- 查询所有 -->
	<select id="getAll" resultMap="BaseResultMap">
		SELECT * FROM user_Info ORDER BY id DESC
	</select>
	
	<!-- 分页查询所有 -->
	<select id="getAllByPage" resultMap="BaseResultMap">
		SELECT * FROM user_Info limit #{offset},#{pagesize}
	</select>
	

	<!-- 插入数据 -->
	<insert id="insertUser" useGeneratedKeys="true" keyProperty="id">
		insert into user_Info(name,password,ipAddr)
		values
		(#{name},#{password},#{ipAddr})
	</insert>
	
	<!-- 对应userDao中的updateUser方法 -->
   <update id="updateUser">
           update user_Info set name = #{name}, password = #{password}, ipAddr = #{ipAddr,jdbcType=VARCHAR}
               where id = #{id};
   </update>
   
	<!-- 删除指定ID的数据 -->
	<delete id="deleteByPrimaryKey">
		delete from
		user_Info
		where ID = #{id,jdbcType=VARCHAR}
	</delete>


</mapper>